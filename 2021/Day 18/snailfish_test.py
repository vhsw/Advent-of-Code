"""Day 18: tests"""
import pytest

from snailfish import DATA, explode, parse_line, part1, part2, split


@pytest.mark.parametrize(
    "test_input",
    [
        "[1,2]",
        "[[1,2],3]",
        "[9,[8,7]]",
        "[[1,9],[8,5]]",
        "[[[[1,2],[3,4]],[[5,6],[7,8]]],9]",
        "[[[9,[3,8]],[[0,9],6]],[[[3,7],[4,9]],3]]",
        "[[[[1,3],[5,3]],[[1,3],[8,7]]],[[[4,9],[6,9]],[[8,2],[7,3]]]]",
    ],
)
def test_parse_line(test_input):
    assert str(parse_line(test_input)) == test_input


@pytest.mark.parametrize(
    "test_input,expected",
    [
        ["[[[[[9,8],1],2],3],4]", "[[[[0,9],2],3],4]"],
        ["[7,[6,[5,[4,[3,2]]]]]", "[7,[6,[5,[7,0]]]]"],
        ["[[6,[5,[4,[3,2]]]],1]", "[[6,[5,[7,0]]],3]"],
        ["[[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]", "[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]"],
        ["[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]", "[[3,[2,[8,0]]],[9,[5,[7,0]]]]"],
    ],
)
def test_explode(test_input, expected):
    num = parse_line(test_input)
    explode(num)
    assert str(num) == expected


@pytest.mark.parametrize(
    "test_input,expected",
    [
        ["[[[[0,7],4],[15,[0,13]]],[1,1]]", "[[[[0,7],4],[[7,8],[0,13]]],[1,1]]"],
    ],
)
def test_split(test_input, expected):
    num = parse_line(test_input)
    split(num)
    assert str(num) == expected


EXAMPLE_1 = """
[1,1]
[2,2]
[3,3]
[4,4]
""".strip()
EXAMPLE_2 = """
[1,1]
[2,2]
[3,3]
[4,4]
[5,5]
""".strip()
EXAMPLE_3 = """
[1,1]
[2,2]
[3,3]
[4,4]
[5,5]
[6,6]
""".strip()
EXAMPLE_4 = """
[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]
[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]
[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]
[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]
[7,[5,[[3,8],[1,4]]]]
[[2,[2,2]],[8,[8,1]]]
[2,9]
[1,[[[9,3],9],[[9,0],[0,7]]]]
[[[5,[7,4]],7],1]
[[[[4,2],2],6],[8,7]]
""".strip()

EXAMPLE = """
[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
[[[5,[2,8]],4],[5,[[9,9],0]]]
[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
[[[[5,4],[7,7]],8],[[8,3],8]]
[[9,3],[[9,9],[6,[4,9]]]]
[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]
""".strip()


def test_part1():
    """Part 1 test"""
    assert part1(EXAMPLE) == 4140
    assert part1(DATA) == 3494


def test_part2():
    """Part 2 test"""
    assert part2(EXAMPLE) == 3993
    assert part2(DATA) == 4712
